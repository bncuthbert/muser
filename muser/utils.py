""" Utility functions. """

import numpy as np
import peakutils

def get_peaks(amp, frq, thres):
    """ """
    try:
        peaks_idx = [peakutils.indexes(ch, thres=thres) for ch in amp]
        # TODO: could convert to numpy (constant size) if assign peaks
        #       to harmonic object containing all notes
        #       (could also be used for training)
        peaks = [(frq[idx], amp[i][idx]) for i, idx in enumerate(peaks_idx)]
    except TypeError:  # amp not iterable
        return get_peaks([amp], frq, thres=thres)

    return peaks


def nearest_pow(num, base, rule=round):
    """ Given a base, return power nearest to num.

    Parameters:
        num (float):
        base (float):
        rule (function):

    """
    return int(rule(np.log10(num) / np.log10(base)))

def lmap(*args):
    return list(map(*args))

def series(func, length, *args):
    return lmap(func, args * length)

def get_batches(get_member, batches, batch_size, batch_args=None):
    """ Return batches of elements generated by `get_member`.

    Parameters:
        get_member (function): Generates batch members.
        batches (int): Number of batches to return.
        batch_size (int): Number of members in each batch.

    Returns:
        batches (list): A series of batches from `get_member`.
    """
    def batch(*args):
        return series(get_member, batch_size, *args)
    batches = series(batch, batches, batch_args)

    return batches
